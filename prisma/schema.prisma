// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(cuid())
  name              String?
  email             String?          @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              UserRole?
  onboardingStatus  OnboardingStatus @default(NOT_STARTED)
  // accounts          Account[]
  // sessions          Session[]
  companyProfile    companyProfile?
  consumerProfile   ConsumerProfile?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model ConsumerProfile {
  id                 String   @id @default(cuid())
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  // location           String?
  industries         String[] // Stored as JSON
  // ethicalConcerns    String[] // Stored as JSON
  customConcerns     String?
  controversyAlerts  Boolean  @default(true)
  weeklyDigest       Boolean  @default(true)
  companyUpdates     Boolean  @default(false)
  companiesFollowed  String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model companyProfile {
  id               Int               @id @default(autoincrement())
  userId           String            @unique
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  name             String
  industry         String
  competitors      String?
  twitterHandle    String?
  facebookPage     String?
  instagramHandle  String?
  linkedinPage     String?
  growthRate       Float             @default(0)
  marketImpact     Float             @default(0)
  stockImpact      Float             @default(0)
  reputation       Float             @default(0)
  products         Product[]         // <- One-to-many with Products
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Product {
  id               Int               @id @default(autoincrement())
  name             String
  description      String?
  businessId       Int
  business         companyProfile   @relation(fields: [businessId], references: [id], onDelete: Cascade)
  reputation       Float             @default(0)
  impactOnMarket   Float             @default(0)
  actions          Action[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Action {
  id                 Int             @id @default(autoincrement())
  type               String          // 'Positive', 'Negative', etc.
  impactOnReputation Float
  marketEffect       Float
  date               DateTime        @default(now())
  productId          Int
  product            Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  sentiment          Sentiment?
  marketAnalysis     MarketAnalysis?
  growthAnalysis     GrowthAnalysis?
}

model Sentiment {
  id              Int     @id @default(autoincrement())
  sentimentScore  Float   // Sentiment score value
  analysisDate    DateTime @default(now())
  actionId        Int     @unique
  action          Action  @relation(fields: [actionId], references: [id], onDelete: Cascade)
}

model MarketAnalysis {
  id              Int     @id @default(autoincrement())
  globalImpact    Float
  stockTrend      String  // E.g., 'Bullish', 'Bearish'
  date            DateTime @default(now())
  actionId        Int     @unique
  action          Action  @relation(fields: [actionId], references: [id], onDelete: Cascade)
}

model GrowthAnalysis {
  id              Int     @id @default(autoincrement())
  growthRate      Float
  date            DateTime @default(now())
  actionId        Int     @unique
  action          Action  @relation(fields: [actionId], references: [id], onDelete: Cascade)
}
  

enum UserRole {
  BUSINESS
  CONSUMER
}

enum OnboardingStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}


